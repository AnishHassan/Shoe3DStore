{"version":3,"file":"static/js/394.5aa84d78.chunk.js","mappings":"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","sources":["UserModule/MenuButton.tsx","UserModule/Dialog.tsx","UserModule/index.tsx"],"sourcesContent":["import styled from 'styled-components';\r\n\r\ninterface ButtonData {\r\n    number: number;\r\n    image: string;\r\n}\r\n\r\ninterface SlideContentProps {\r\n    buttons: ButtonData[];\r\n}\r\n\r\nconst SlideContent: React.FC<SlideContentProps> = ({ buttons }) => {\r\n    return (<>\r\n        <MenuLabel>Profile</MenuLabel>\r\n        <ButtonsGrid>\r\n            {buttons.map(({ number, image }) => (\r\n                <ButtonWrapper key={number}>\r\n                    <ButtonImage src={image} alt={`Button ${number}`} />\r\n                    <ButtonNumber>{number}</ButtonNumber>\r\n                </ButtonWrapper>\r\n            ))}\r\n        </ButtonsGrid>\r\n    </>\r\n\r\n    );\r\n};\r\n\r\nconst MenuLabel = styled.h2`\r\ndisplay:flex ;\r\nalign-items : center;\r\njustify-content : center;\r\nfont-size : 26px;\r\n\r\n`\r\n\r\nconst ButtonsGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));\r\n  grid-gap: 10px;\r\n  min-width: 250px;\r\n  `;\r\n\r\nconst ButtonWrapper = styled.div`\r\n    position: relative;\r\n    background-color:#9c4037;\r\n    border-radius : 16px;\r\n  `;\r\n\r\nconst ButtonImage = styled.img`\r\n    width: 80px;\r\n    height: 80px;\r\n    object-fit: cover;\r\n    border-radius: 5px;\r\n  `;\r\n\r\nconst ButtonNumber = styled.span`\r\n    position: absolute;\r\n    top: -5px;\r\n    left: -5px;\r\n    font-size: 17px;\r\n    font-weight: bold;\r\n    width : 20px;\r\n    align-items : center;\r\n    display : flex;\r\n    justify-content : center;\r\n    height : 20px;\r\n    color: #000;\r\n    border-radius : 50%;\r\n    background-color  : #fff;\r\n    text-shadow: 1px 1px 1px black;\r\n  `;\r\n\r\nexport default SlideContent","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport 'swiper/css';\r\nimport 'swiper/css/navigation';\r\nimport 'swiper/css/pagination';\r\nimport 'swiper/css/scrollbar';\r\nimport { Navigation, Pagination, Scrollbar, A11y } from 'swiper';\r\nimport menu1 from '../assets/menu1.png'\r\nimport menu2 from '../assets/menu2.png'\r\nimport menu3 from '../assets/menu3.png'\r\nimport menu4 from '../assets/menu4.png'\r\n\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\n// Import Swiper styles\r\nimport 'swiper/css';\r\nimport SlideContent from './MenuButton';\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\ntype StyleType = {\r\n  '--swiper-navigation-color': string;\r\n  '--swiper-navigation-size': string;\r\n};\r\n\r\nconst Dialog: React.FC<Props> = ({ isOpen, onClose }) => {\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n\r\n  const handleSlideChange = (swiper: any) => {\r\n    setActiveIndex(swiper.activeIndex);\r\n  };\r\n\r\n  const handleWrapperClick = (event: React.MouseEvent<HTMLDivElement>) => {\r\n    if (event.target === event.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <DialogWrapper isOpen={isOpen}>\r\n      <DialogContent>\r\n        <CloseButton onClick={handleButtonClick}>X</CloseButton>\r\n        <Swiper\r\n          spaceBetween={50}\r\n          slidesPerView={1}\r\n          onSlideChange={handleSlideChange}\r\n          pagination={{ clickable: true }}\r\n        >\r\n          <SwiperSlide>\r\n            <SlideWrapper>\r\n              <SlideContent buttons={[\r\n                { number: 1, image: menu1 },\r\n                { number: 2, image: menu1 },\r\n                { number: 3, image: menu2 },\r\n                { number: 1, image: menu1 },\r\n                { number: 2, image: menu2 },\r\n                { number: 3, image: menu3 },\r\n                { number: 1, image: menu1 },\r\n                { number: 2, image: menu3 },\r\n                { number: 3, image: menu1 },\r\n              ]} />\r\n            </SlideWrapper>\r\n          </SwiperSlide>\r\n          <SwiperSlide>\r\n            <SlideWrapper>\r\n              <SlideContent\r\n                buttons={[\r\n                  { number: 1, image: menu1 },\r\n                  { number: 2, image: menu2 },\r\n                  { number: 3, image: menu1 },\r\n                  { number: 1, image: menu3 },\r\n                  { number: 2, image: menu1 },\r\n                  { number: 3, image: menu2 },\r\n                  // Add more buttons here...\r\n                ]}\r\n              />\r\n            </SlideWrapper>\r\n          </SwiperSlide>\r\n        </Swiper>\r\n        <PaginationWrapper>\r\n          <PaginationDot isActive={activeIndex === 0} />\r\n          <PaginationDot isActive={activeIndex === 1} />\r\n        </PaginationWrapper>\r\n      </DialogContent>\r\n    </DialogWrapper>\r\n  );\r\n};\r\n\r\nconst SlideWrapper = styled.div`\r\n  height: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\n\r\n\r\nconst Button = styled.button`\r\n  position: relative;\r\n  width: 50px;\r\n  height: 50px;\r\n  background: url(menu1) no-repeat center center;\r\n  background-size: cover;\r\n  border: none;\r\n  border-radius: 50%;\r\n  cursor: pointer;\r\n  &::before {\r\n    content: attr(data-number);\r\n    position: absolute;\r\n    top: 5px;\r\n    left: 5px;\r\n    width: 20px;\r\n    height: 20px;\r\n    background-color: #fff;\r\n    color: #000;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst PaginationWrapper = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding : 10px;\r\n`;\r\n\r\nconst PaginationDot = styled.div<{ isActive: boolean }>`\r\n  width: 10px;\r\n  height: 10px;\r\n  margin-right: 10px;\r\n  border-radius: 50%;\r\n  background-color: ${(props) => (props.isActive ? '#000' : '#ddd')};\r\n`;\r\n\r\nconst DialogWrapper = styled.div<{ isOpen: boolean }>`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n  display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};                     \r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 3;\r\n`;\r\n\r\nconst DialogContent = styled.div`\r\n  width: 300px;\r\n  height: 450px;\r\n  background-color: white;\r\n  padding: 20px;\r\n  z-index: 3;\r\n  border-radius: 30px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color : #ff7c35;\r\n  position: relative; /* add positioning context */\r\n`;\r\n\r\nconst CloseButton = styled.button`\r\n  position: absolute;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  top: 20px;\r\n  background-color: transparent;\r\n  border: none;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  color: #000;\r\n  z-index: 3;\r\n`;\r\n\r\nexport default Dialog;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Dialog from './Dialog';\r\n\r\ninterface Props {\r\n  imageUrl: string;\r\n  username: string;\r\n  email: string;\r\n}\r\n\r\n\r\n\r\n\r\nconst USerModule = ({ imageUrl, username, email }: Props) => {\r\n  const [showUserInfo, setShowUserInfo] = useState(false);\r\n\r\n  const handleAvatarClick = () => {\r\n    setShowUserInfo(!showUserInfo);\r\n  };\r\n  const handleCloseDialog = () => {\r\n    setShowUserInfo(!showUserInfo);\r\n  };\r\n\r\n  return (\r\n    <AvatarContainer onClick={handleAvatarClick}>\r\n      <AvatarImg src={imageUrl} alt=\"User Avatar\" />\r\n      <Dialog isOpen={showUserInfo} onClose={handleCloseDialog} />\r\n      {/* <AvatarOverlay>{showUserInfo ? <span>2</span> : null}</AvatarOverlay>\r\n      {showUserInfo && (\r\n        <UserInfoDialog>\r\n          <UserInfoLabel>Username: {username}</UserInfoLabel>\r\n          <UserInfoLabel>Email: {email}</UserInfoLabel>\r\n        </UserInfoDialog>\r\n      )} */}\r\n    </AvatarContainer>\r\n  );\r\n};\r\n\r\nconst AvatarContainer = styled.div`\r\n  position: relative;\r\n  width: 70px;\r\n  height: 70px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  margin-top : 30px;\r\n   @media (max-width: 1440px) {\r\n  width: 60px;\r\n  height: 60px;\r\nmargin-top : 25px;\r\n  }\r\n`;\r\n\r\nconst AvatarOverlay = styled.div`\r\n  position: absolute;\r\n  top: 3;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #000;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #fff;\r\n  font-size: 20px;\r\n`;\r\n\r\nconst AvatarImg = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n`;\r\n\r\nconst UserInfoDialog = styled.div`\r\n  position: absolute;\r\n  top: 50px;\r\n  right: 0;\r\n  z-index: 1;\r\n  width: 200px;\r\n  height: 120px;\r\n  background-color: #fff;\r\n  border-radius: 5px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  padding: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst UserInfoLabel = styled.span`\r\n  margin-bottom: 5px;\r\n`;\r\nexport default USerModule;\r\n"],"names":["MenuLabel","styled","_templateObject","_taggedTemplateLiteral","ButtonsGrid","_templateObject2","ButtonWrapper","_templateObject3","ButtonImage","_templateObject4","ButtonNumber","_templateObject5","_ref","buttons","_jsxs","_Fragment","children","_jsx","map","_ref2","number","image","src","alt","concat","SlideWrapper","PaginationWrapper","PaginationDot","props","isActive","DialogWrapper","isOpen","DialogContent","_templateObject6","CloseButton","_templateObject7","onClose","_useState","useState","_useState2","_slicedToArray","activeIndex","setActiveIndex","onClick","event","Swiper","spaceBetween","slidesPerView","onSlideChange","swiper","pagination","clickable","SwiperSlide","SlideContent","menu1","menu2","menu3","AvatarContainer","AvatarImg","imageUrl","username","email","showUserInfo","setShowUserInfo","Dialog"],"sourceRoot":""}